# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:28:14+00:00

from __future__ import annotations

from typing import Any, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class BodyBlob(RootModel[SecretStr]):
    root: SecretStr


class CustomAttributesHeader(RootModel[SecretStr]):
    root: SecretStr


class EnableExplanationsHeader(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=64)


class EndpointName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)


class Header(RootModel[constr(pattern=r'\p{ASCII}*', max_length=1024)]):
    root: constr(pattern=r'\p{ASCII}*', max_length=1024)


class InferenceId(
    RootModel[constr(pattern=r'\A\S[\p{Print}]*\z', min_length=1, max_length=64)]
):
    root: constr(pattern=r'\A\S[\p{Print}]*\z', min_length=1, max_length=64)


class InputLocationHeader(
    RootModel[
        constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', min_length=1, max_length=1024)
    ]
):
    root: constr(pattern=r'^(https|s3)://([^/]+)/?(.*)$', min_length=1, max_length=1024)


class InternalDependencyException(RootModel[Any]):
    root: Any


class InternalFailure(RootModel[Any]):
    root: Any


class InvocationTimeoutSecondsHeader(RootModel[conint(ge=1, le=3600)]):
    root: conint(ge=1, le=3600)


class InvokeEndpointAsyncInput(BaseModel):
    pass


class InvokeEndpointAsyncOutput(BaseModel):
    InferenceId: Optional[Header] = None


class InvokeEndpointInput(BaseModel):
    Body: BodyBlob


class InvokeEndpointOutput(BaseModel):
    Body: BodyBlob


class ModelError(RootModel[Any]):
    root: Any


class ModelNotReadyException(RootModel[Any]):
    root: Any


class RequestTTLSecondsHeader(RootModel[conint(ge=60, le=21600)]):
    root: conint(ge=60, le=21600)


class ServiceUnavailable(RootModel[Any]):
    root: Any


class TargetContainerHostnameHeader(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)


class TargetModelHeader(
    RootModel[constr(pattern=r'\A\S[\p{Print}]*\z', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'\A\S[\p{Print}]*\z', min_length=1, max_length=1024)


class TargetVariantHeader(
    RootModel[constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', max_length=63)


class ValidationError(RootModel[Any]):
    root: Any


class EndpointsEndpointNameInvocationsPostRequest(BaseModel):
    Body: SecretStr = Field(
        ...,
        description='<p>Provides input data, in the format specified in the <code>ContentType</code> request header. Amazon SageMaker passes all of the data in the body to the model. </p> <p>For information about the format of the request body, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html">Common Data Formats-Inference</a>.</p>',
    )
